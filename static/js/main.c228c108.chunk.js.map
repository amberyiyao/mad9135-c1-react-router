{"version":3,"sources":["images/smile-regular.svg","images/comments-regular.svg","images/list-alt-regular.svg","images/loading.svg","components/Header.js","components/UserCard.js","components/PostsCard.js","components/TodoCard.js","components/Loading.js","components/UserDetail.js","stores/configureStore.js","actions/actions.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","header","userCards","postUrl","user","id","todoUrl","userUrl","src","Avatar","alt","to","onClick","getCurrentUser","changeHeader","name","email","handleActions","postCard","img","post","title","body","todoCard","status","todo","completed","Loading","loading","userDetail","address","city","phone","website","defaultState","users","posts","todos","currentUser","store","createStore","state","action","console","log","type","data","changePostData","newPosts","changeTodosData","newTodos","App","userPage","getUserAction","a","setState","newInfor","getState","filter","item","userId","updateHeader","dispatch","actions","setTimeout","text","this","fetch","then","response","json","getData","subscribe","usersList","map","key","postsList","todosList","basename","path","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c228c108.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/smile-regular.aca9471f.svg\";","module.exports = __webpack_public_path__ + \"static/media/comments-regular.1f301d23.svg\";","module.exports = __webpack_public_path__ + \"static/media/list-alt-regular.1f44e83c.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.47b17d22.svg\";","import React from 'react';\r\nimport './Header.css'\r\n\r\nfunction Header(props){\r\n    return (\r\n        <header className=\"App-header\">\r\n          <p>{props.header}</p>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport Avatar from '../images/smile-regular.svg'\r\nimport './UserCard.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction userCards(props){\r\n    const postUrl = `/user/${props.user.id}/posts`\r\n    const todoUrl = `/user/${props.user.id}/todos`\r\n    const userUrl = `/user/${props.user.id}`\r\n\r\n    return(\r\n          <div className=\"UserCard\">\r\n            <div className=\"card-infor\">\r\n            <div className=\"card-avatar\">\r\n                <img src={Avatar} alt=\"user icon\"/>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <Link className=\"user-name\" to={userUrl} onClick={()=>{\r\n                    props.getCurrentUser(props.user)\r\n                    props.changeHeader(props.user.name)\r\n                    }}>\r\n                    {props.user.name}<br/>\r\n                    <span className=\"user-email\">{props.user.email}</span>\r\n                </Link>\r\n            </div>\r\n            </div>\r\n            <div className=\"card-action\">\r\n                <Link to={postUrl} onClick={()=>{props.handleActions(props.user, 'posts')}}>Posts</Link>\r\n                <Link to={todoUrl} onClick={()=>{props.handleActions(props.user, 'todos')}}>Todo</Link>\r\n            </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default userCards","import React from 'react';\r\nimport img from '../images/comments-regular.svg';\r\nimport './PostCard.css'\r\n\r\nfunction postCard(props){\r\n\r\n    return(\r\n        <div className=\"postCard\">\r\n            <img src={img} alt=\"post icon\"/>\r\n            <div className=\"postInfor\">\r\n                <p className=\"postTitle\">{props.post.title}</p>\r\n                <p className=\"postBody\">{props.post.body}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default postCard","import React from 'react';\r\nimport img from '../images/list-alt-regular.svg';\r\nimport './TodoCard.css'\r\n\r\nfunction todoCard(props){\r\n    const status = props.todo.completed? \"Done\" : \"Pending\"\r\n\r\n    return(\r\n        <div className=\"todoCard\">\r\n            <img src={img} alt=\"todo icon\"/>\r\n            <div className=\"todoInfor\">\r\n                <p className=\"todoTitle\">{props.todo.title}</p>\r\n                <p className=\"status\">{status}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default todoCard ","import React from 'react'\r\nimport loading from '../images/loading.svg'\r\n\r\nfunction Loading(){\r\n    return (\r\n        <div className=\"loading\">\r\n            <img src={loading}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading","import React from 'react';\r\nimport Avatar from '../images/smile-regular.svg'\r\nimport { Link } from 'react-router-dom'\r\nimport './UserDetail.css'\r\n\r\n\r\nfunction userDetail(props){\r\n    const postUrl = `/user/${props.user.id}/posts`\r\n    const todoUrl = `/user/${props.user.id}/todos`\r\n    return(\r\n        <div className=\"userDetail\">\r\n            <img src={Avatar}/>\r\n            <p><b>Name:</b> {props.user.name}</p>\r\n            <p><b>City:</b> {props.user.address.city}</p>\r\n            <p><b>Phone:</b> {props.user.phone}</p>\r\n            <p><b>Email:</b> {props.user.email}</p>\r\n            <p><b>Website:</b> {props.user.website}</p>\r\n            <div className=\"card-actions\">\r\n                <Link to={postUrl} onClick={()=>{props.handleActions(props.user, 'posts')}}>Posts</Link>\r\n                <Link to={todoUrl} onClick={()=>{props.handleActions(props.user, 'todos')}}>Todo</Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default userDetail","import { createStore } from 'redux'\r\n\r\nlet defaultState = {\r\n    users:[],\r\n    posts:[],\r\n    todos:[],\r\n    currentUser:{}\r\n}\r\n\r\nfunction amount(state = defaultState, action){\r\n    console.log(action.type, action.data)\r\n    if(action.type){\r\n        return {...state, ...action.data}\r\n    }\r\n    return state\r\n}\r\n\r\nlet store = createStore(amount)\r\n\r\nexport default store","export function changeUserData(newUsers){\r\n    return {\r\n        type: \"CHANGE_UESER_DATA\",\r\n        data: {users: newUsers}\r\n    }\r\n}\r\n\r\nexport function changePostData(newPosts){\r\n    return {\r\n        type: \"CHANGE_POST_DATA\",\r\n        data: {posts: newPosts}\r\n    }\r\n}\r\n\r\nexport function changeTodosData(newTodos){\r\n    return {\r\n        type: \"CHANGE_TODO_DATA\",\r\n        data: {todos: newTodos}\r\n    }\r\n}","import React from 'react'\r\nimport Header from './components/Header'\r\nimport './App.css'\r\nimport UserCard from './components/UserCard'\r\nimport PostCard from './components/PostsCard'\r\nimport TodoCard from './components/TodoCard'\r\nimport Loading from './components/Loading'\r\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom'\r\nimport UserDetail from './components/UserDetail'\r\nimport store from './stores/configureStore'\r\nimport * as actions from './actions/actions'\r\n\r\nclass App extends React.Component{\r\n\r\n  state = {\r\n    currentUser:{},\r\n    header: \"Users\",\r\n    loading: true,\r\n    userPage: false\r\n  }\r\n\r\n  async getData(type){\r\n    this.setState({loading: true})\r\n\r\n    if(type === 'users'){\r\n      await fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => store.dispatch(actions.changeUserData(users)))\r\n    } else if(type === 'posts'){\r\n      await fetch('https://jsonplaceholder.typicode.com/posts')\r\n      .then(response => response.json())\r\n      .then(posts => store.dispatch(actions.changePostData(posts)))\r\n    } else {\r\n      await fetch('https://jsonplaceholder.typicode.com/todos')\r\n      .then(response => response.json())\r\n      .then(todos => store.dispatch(actions.changeTodosData(todos)))\r\n    }\r\n    setTimeout(()=>this.setState({loading: false}),1000) //Just for showing laoding animation for longer time for marking, or you will not see it. I will not use like this in real project.\r\n  }\r\n\r\n  getUserAction= async (user, action)=>{\r\n    this.setState({loading: true})\r\n    \r\n    if(action === 'posts'){\r\n      const newInfor = store.getState().posts.filter(item => item.userId === user.id) \r\n      this.updateHeader(`${user.name} Posts`)\r\n      store.dispatch(actions.changePostData(newInfor))\r\n    } else {\r\n      const newInfor = store.getState().todos.filter(item => item.userId === user.id) \r\n      this.updateHeader(`${user.name} Todos`)\r\n      store.dispatch(actions.changeTodosData(newInfor))\r\n      \r\n    } \r\n\r\n    setTimeout(()=>this.setState({loading: false}),1000)//Just for showing laoding animation for longer time for marking, or you will not see it. I will not use like this in real project.\r\n  }\r\n\r\n  getCurrentUser=(user)=>{\r\n    this.setState({loading: true})\r\n\r\n    const currentUser = store.getState().users.filter(item => item.id === user.id)\r\n    this.setState({currentUser: currentUser[0]})\r\n    this.setState({userPage: true})\r\n\r\n    setTimeout(()=>this.setState({loading: false}),1000)//Just for showing laoding animation for longer time for marking, or you will not see it. I will not use like this in real project.\r\n  }\r\n\r\n  updateHeader = (text)=>{\r\n    this.setState({header: text})\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.getData('users')\r\n    this.getData('posts')\r\n    this.getData('todos')\r\n    store.subscribe(()=> this.setState({}))\r\n  }\r\n\r\n  render(){\r\n\r\n    if(!store.getState().users){\r\n      this.getData('users')\r\n    }\r\n    if(!store.getState().posts){\r\n      this.getData('posts')\r\n    }\r\n    if(!store.getState().todos){\r\n      this.getData('todos')\r\n    }\r\n\r\n    const usersList = store.getState().users.map(user => <UserCard key={user.id} user={user} handleActions={this.getUserAction} getCurrentUser={this.getCurrentUser} changeHeader={this.updateHeader}/>)\r\n    const postsList = store.getState().posts.map(post => <PostCard key={post.id} post={post} />)\r\n    const todosList = store.getState().todos.map(todo => <TodoCard key={todo.id} todo={todo} />)\r\n   \r\n    return (\r\n      <Router basename=\"/mad9135-c1-react-router\">\r\n        <div className=\"App\">\r\n          <Header header={this.state.header}/>\r\n            {\r\n              this.state.userPage\r\n              ?(<nav>\r\n                <Link to=\"/users\" onClick={()=> {\r\n                  this.updateHeader(\"Users\")\r\n                  this.getData('users')\r\n                  this.setState({userPage:false})\r\n                  }}>Users</Link>\r\n                <Link to=\"/posts\" onClick={()=> {\r\n                  this.updateHeader(`${this.state.header} Posts`)\r\n                  this.getUserAction(this.state.currentUser, 'posts')\r\n                  this.setState({userPage:false})\r\n                }}>Posts</Link>\r\n                <Link to=\"/todos\" onClick={()=> {\r\n                  this.updateHeader(`${this.state.header} Todos`)\r\n                  this.getUserAction(this.state.currentUser, 'todos')\r\n                  this.setState({userPage:false})\r\n                }}>ToDos</Link>\r\n                </nav>\r\n              )\r\n              :(\r\n                <nav>\r\n                <Link to=\"/users\" onClick={()=> {\r\n                  this.updateHeader(\"Users\")\r\n                  this.getData('users')\r\n                  }}>Users</Link>\r\n                <Link to=\"/posts\" onClick={()=> {\r\n                  this.updateHeader(\"Posts\")\r\n                  this.getData('posts')\r\n                }}>Posts</Link>\r\n                <Link to=\"/todos\" onClick={()=> {\r\n                  this.updateHeader(\"Todos\")\r\n                  this.getData('todos')\r\n                }}>ToDos</Link>\r\n                </nav>\r\n              )}\r\n          {\r\n            this.state.loading\r\n            ? (<Loading/>)\r\n            : (<Switch>\r\n                  <Route path={[\"/user/:id/posts\", \"/posts\"]}>\r\n                    {postsList}\r\n                  </Route>\r\n                  <Route path={[\"/user/:id/todos\", \"/todos\"]}>\r\n                    {todosList}\r\n                  </Route>\r\n                  <Route path=\"/user/:id\">\r\n                    <UserDetail user={this.state.currentUser} handleActions={this.getUserAction}/>\r\n                  </Route>\r\n                  <Route path=\"/\">\r\n                    {usersList}\r\n                  </Route>\r\n                </Switch>\r\n              ) \r\n            }\r\n        </div>\r\n        </Router>\r\n      );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}