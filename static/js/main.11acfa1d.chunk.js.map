{"version":3,"sources":["smile-regular.svg","comments-regular.svg","list-alt-regular.svg","loading.svg","Header.js","UserCard.js","PostsCard.js","TodoCard.js","Loading.js","UserDetail.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","header","userCards","postUrl","user","id","todoUrl","userUrl","src","Avatar","alt","to","onClick","getCurrentUser","changeHeader","name","email","handleActions","postCard","img","post","title","body","todoCard","status","todo","completed","Loading","loading","userDetail","address","city","phone","website","App","state","users","posts","todos","currentUser","userPage","getUserAction","action","a","setState","newInfor","filter","item","userId","setTimeout","updateHeader","text","type","this","fetch","then","response","json","getUsers","usersList","map","key","postsList","todosList","basename","path","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.11acfa1d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/smile-regular.aca9471f.svg\";","module.exports = __webpack_public_path__ + \"static/media/comments-regular.1f301d23.svg\";","module.exports = __webpack_public_path__ + \"static/media/list-alt-regular.1f44e83c.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.47b17d22.svg\";","import React from 'react';\r\nimport './Header.css'\r\n\r\nfunction Header(props){\r\n    return (\r\n        <header className=\"App-header\">\r\n          <p>{props.header}</p>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport Avatar from './smile-regular.svg'\r\nimport './UserCard.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction userCards(props){\r\n    const postUrl = `/user/${props.user.id}/posts`\r\n    const todoUrl = `/user/${props.user.id}/todos`\r\n    const userUrl = `/user/${props.user.id}`\r\n\r\n    return(\r\n          <div className=\"UserCard\">\r\n            <div className=\"card-infor\">\r\n            <div className=\"card-avatar\">\r\n                <img src={Avatar} alt=\"user icon\"/>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <Link className=\"user-name\" to={userUrl} onClick={()=>{\r\n                    props.getCurrentUser(props.user)\r\n                    props.changeHeader(props.user.name)\r\n                    }}>\r\n                    {props.user.name}<br/>\r\n                    <span className=\"user-email\">{props.user.email}</span>\r\n                </Link>\r\n            </div>\r\n            </div>\r\n            <div className=\"card-action\">\r\n                <Link to={postUrl} onClick={()=>{props.handleActions(props.user, 'posts')}}>Posts</Link>\r\n                <Link to={todoUrl} onClick={()=>{props.handleActions(props.user, 'todos')}}>Todo</Link>\r\n            </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default userCards","import React from 'react';\r\nimport img from './comments-regular.svg';\r\nimport './PostCard.css'\r\n\r\nfunction postCard(props){\r\n\r\n    return(\r\n        <div className=\"postCard\">\r\n            <img src={img} alt=\"post icon\"/>\r\n            <div className=\"postInfor\">\r\n                <p className=\"postTitle\">{props.post.title}</p>\r\n                <p className=\"postBody\">{props.post.body}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default postCard","import React from 'react';\r\nimport img from './list-alt-regular.svg';\r\nimport './TodoCard.css'\r\n\r\nfunction todoCard(props){\r\n    const status = props.todo.completed? \"Done\" : \"Pending\"\r\n\r\n    return(\r\n        <div className=\"todoCard\">\r\n            <img src={img} alt=\"todo icon\"/>\r\n            <div className=\"todoInfor\">\r\n                <p className=\"todoTitle\">{props.todo.title}</p>\r\n                <p className=\"status\">{status}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default todoCard ","import React from 'react'\r\nimport loading from './loading.svg'\r\n\r\nfunction Loading(){\r\n    return (\r\n        <div className=\"loading\">\r\n            <img src={loading}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading","import React from 'react';\r\nimport Avatar from './smile-regular.svg'\r\nimport { Link } from 'react-router-dom'\r\nimport './UserDetail.css'\r\n\r\n\r\nfunction userDetail(props){\r\n    const postUrl = `/user/${props.user.id}/posts`\r\n    const todoUrl = `/user/${props.user.id}/todos`\r\n    return(\r\n        <div className=\"userDetail\">\r\n            <img src={Avatar}/>\r\n            <p><b>Name:</b> {props.user.name}</p>\r\n            <p><b>City:</b> {props.user.address.city}</p>\r\n            <p><b>Phone:</b> {props.user.phone}</p>\r\n            <p><b>Email:</b> {props.user.email}</p>\r\n            <p><b>Website:</b> {props.user.website}</p>\r\n            <div className=\"card-actions\">\r\n                <Link to={postUrl} onClick={()=>{props.handleActions(props.user, 'posts')}}>Posts</Link>\r\n                <Link to={todoUrl} onClick={()=>{props.handleActions(props.user, 'todos')}}>Todo</Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default userDetail","import React from 'react'\nimport Header from './Header'\nimport './App.css'\nimport UserCard from './UserCard'\nimport PostCard from './PostsCard'\nimport TodoCard from './TodoCard'\nimport Loading from './Loading'\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom'\nimport UserDetail from './UserDetail'\n\nclass App extends React.Component{\n\n  state = {\n    users:[],\n    posts:[],\n    todos:[],\n    currentUser:{},\n    header: \"Users\",\n    loading: true,\n    userPage: true\n  }\n\n  async getUsers(type){\n    this.setState({loading: true})\n\n    if(type === 'users'){\n      await fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({users}))\n    } else if(type === 'posts'){\n      await fetch('https://jsonplaceholder.typicode.com/posts')\n      .then(response => response.json())\n      .then(posts => this.setState({posts}))\n    } else {\n      await fetch('https://jsonplaceholder.typicode.com/todos')\n      .then(response => response.json())\n      .then(todos => this.setState({todos}))\n    }\n    setTimeout(()=>this.setState({loading: false}),1000) //Just for showing laoding animation for longer time for marking, or you will not see it. I will not use like this in real project.\n  }\n\n   getUserAction= async (user, action)=>{\n    this.setState({loading: true})\n    \n    if(action === 'posts'){\n       const newInfor = this.state.posts.filter(item => item.userId === user.id)    \n      this.setState({posts: newInfor, header: `${user.name} Posts`})\n    } else {\n      const newInfor = this.state.todos.filter(item => item.userId === user.id)    \n      this.setState({todos: newInfor, header: `${user.name} Todos`})\n    } \n\n    setTimeout(()=>this.setState({loading: false}),1000)//Just for showing laoding animation for longer time for marking, or you will not see it. I will not use like this in real project.\n  }\n\n  getCurrentUser=(user)=>{\n    this.setState({loading: true})\n\n    const currentUser = this.state.users.filter(item => item.id === user.id)\n    this.setState({currentUser: currentUser[0]})\n    this.setState({userPage: true})\n\n    setTimeout(()=>this.setState({loading: false}),1000)//Just for showing laoding animation for longer time for marking, or you will not see it. I will not use like this in real project.\n  }\n\n  updateHeader = (text)=>{\n    this.setState({header:text})\n  }\n\n  componentDidMount(){\n    this.getUsers('users')\n    this.getUsers('posts')\n    this.getUsers('todos')\n  }\n\n  render(){\n    const usersList = this.state.users.map(user => <UserCard key={user.id} user={user} handleActions={this.getUserAction} getCurrentUser={this.getCurrentUser} changeHeader={this.updateHeader}/>)\n    const postsList = this.state.posts.map(post => <PostCard key={post.id} post={post} />)\n    const todosList = this.state.todos.map(todo => <TodoCard key={todo.id} todo={todo} />)\n   \n    return (\n      <Router basename=\"/mad9135-c1-react-router\">\n        <div className=\"App\">\n          <Header header={this.state.header}/>\n            {\n              this.state.userPage\n              ?(<nav>\n                <Link to=\"/users\" onClick={()=> {\n                  this.updateHeader(\"Users\")\n                  this.getUsers('users')\n                  this.setState({userPage:false})\n                  }}>Users</Link>\n                <Link to=\"/posts\" onClick={()=> {\n                  this.updateHeader(`${this.state.header} Posts`)\n                  this.getUserAction(this.state.currentUser, 'posts')\n                  this.getUsers('posts')\n                  this.setState({userPage:false})\n                }}>Posts</Link>\n                <Link to=\"/todos\" onClick={()=> {\n                  this.updateHeader(`${this.state.header} Todos`)\n                  this.getUserAction(this.state.currentUser, 'todos')\n                  this.getUsers('todos')\n                  this.setState({userPage:false})\n                }}>ToDos</Link>\n                </nav>\n              )\n              :(\n                <nav>\n                <Link to=\"/users\" onClick={()=> {\n                  this.updateHeader(\"Users\")\n                  this.getUsers('users')\n                  }}>Users</Link>\n                <Link to=\"/posts\" onClick={()=> {\n                  this.updateHeader(\"Posts\")\n                  this.getUsers('posts')\n                }}>Posts</Link>\n                <Link to=\"/todos\" onClick={()=> {\n                  this.updateHeader(\"Todos\")\n                  this.getUsers('todos')\n                }}>ToDos</Link>\n                </nav>\n              )}\n          {\n            this.state.loading\n            ? (<Loading/>)\n            : (<Switch>\n                  <Route path={[\"/user/:id/posts\", \"/posts\"]}>\n                    {postsList}\n                  </Route>\n                  <Route path={[\"/user/:id/todos\", \"/todos\"]}>\n                    {todosList}\n                  </Route>\n                  <Route path=\"/user/:id\">\n                    <UserDetail user={this.state.currentUser} handleActions={this.getUserAction}/>\n                  </Route>\n                  <Route path=\"/\">\n                    {usersList}\n                  </Route>\n                </Switch>\n              ) \n            }\n        </div>\n        </Router>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}